// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  username     String         @unique
  password     String
  verified     Boolean        @default(true)
  role         Role           @default(BASIC)
  post         Post[]
  theme        Theme[]
  comments     Comment[]
  votes        Commentvote[]
  postvotes    Postvote[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  RefreshToken RefreshToken[]
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  title     String
  postBody  String?
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  Theme     Theme?     @relation(fields: [themeId], references: [id], onDelete: Cascade)
  themeId   String?
  votes     Postvote[]
}

model Postvote {
  author User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  postId String
  value  Int

  @@id([userId, postId])
}

model Theme {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  title       String   @unique
  description String
  creator     User     @relation(fields: [creatorId], references: [id])
  creatorId   String
  post        Post[]
}

model Comment {
  id        String        @id @default(uuid())
  message   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?      @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[]     @relation("ParentChild")
  parentId  String?
  votes     Commentvote[]
}

model Commentvote {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String
  value     Int

  @@id([userId, commentId])
}

enum Role {
  BASIC
  ADMIN
}
